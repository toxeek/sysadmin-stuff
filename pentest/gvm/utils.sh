################
install_gvm_utils() {
    while read GVM_UTIL; do 
        if echo $GVM_UTIL | grep -q "#"; then
            continue
        fi
        util="$(echo $GVM_UTIL | $AWK -F"=" '{print $1}')"
        val="$(echo $GVM_UTIL | $AWK -F"=" '{print $2}')"
        if [[ "$val" -eq "1" ]]; then
            sleep 1 && echo "[~] adding $util to array gvm utils array.." && gvm_utils_array+=($util)
        fi
    done < $gvm_cfg_file
}
################
disable_ipv6_updates() {
    echo "[+] these updates will fail per ipv6 used .. disabling"
    cat > /etc/apt/apt.conf.d/99force-ipv4 <<EOF
Acquire::ForceIPv4 "true";
EOF
    ${APT} update

    return 0
}
################
start_redis_server() {
    echo "[+] starting redis .."
    $(which systemctl) start redis-server

    return 0
}
################
setup_gvm() {
    echo "[+] setting up gvm .."
    echo
    useradd -r -d /opt/gvm -c "GVM User" -s /bin/bash gvm 2>/dev/null
    mkdir -p /opt/gvm
    mkdir -p /opt/gvm/etc/openvas
    chown -R gvm:gvm /opt/
    echo "[+] setup finished"
    
    return 0
}
################
install_yarn() {
    echo 
    echo "[+] installing Yarn .."
    ${CURL} -sS https://dl.yarnpkg.com/debian/pubkey.gpg | apt-key add -
    echo "deb https://dl.yarnpkg.com/debian/ stable main" | tee /etc/apt/sources.list.d/yarn.list
    echo "[+] updating apt-get .."
    ${APT} update
    ${APT} install yarn -y

    return 0
}
################
install_postgres() {
    echo "[+] installing postgres .."
    CWD=$(pwd)
    ${APT} install -y postgresql postgresql-contrib postgresql-server-dev-all
    echo "[+] getting postgres setup for vgm .."
    cd /tmp
    cat > vgm_postgres.sql &>/dev/null <<EOF 
Create USER gvm;
CREATE DATABASE gvmd;
GRANT ALL PRIVILEGES ON DATABASE gvmd TO gvm;
\c gvmd;
create role dba with superuser noinherit;
create extension "uuid-ossp";
grant dba to gvm;
\q
EOF
    sudo -iu postgres psql < vgm_postgres.sql

    echo "[+] restarting and enable postgres .."
    systemctl restart postgresql
    systemctl enable postgresql

    cd $CWD

    return 0
}
#################
setup_gvm_env() {
    echo "[+] setting gvm environment .."
    local path=$(cat ~/.bashrc | grep "PATH")
    local gvm_path=":/opt/gvm/bin:/opt/gvm/sbin:/opt/gvm/.local/bin"
    sed -i 's/.*PATH=.*//' ~/.bashrc
    local new_path="${path}${gvm_path}"
    echo $new_path >> ~/.bashrc

    export PATH=$(echo $new_path | sed -e 's/export PATH=//')

    echo "/opt/gvm/lib" > /etc/ld.so.conf.d/gvm.conf

    return 0
}
#################
install_gvm() {
    # we redirect stderr and stdout to log files
    mkdir -p /tmp/build_gvm/logs
    exec 2> >(tee "/tmp/build_gvm/logs/err_log") 
    exec > >(tee "/tmp/build_gvm/logs/out_log")

    echo "[+] installing gvm from source .."
    CWD=$(pwd)
    echo "[+] creating tmp dirs .."
    mkdir -p /tmp/gvm-source && cd /tmp/gvm-source

    echo "[+] cloning begins .. [ grab a cup of tea .. ]"
    git clone -b gvm-libs-11.0 https://github.com/greenbone/gvm-libs.git
    git clone https://github.com/greenbone/openvas-smb.git
    git clone -b openvas-7.0 https://github.com/greenbone/openvas.git
    git clone -b ospd-2.0 https://github.com/greenbone/ospd.git
    git clone -b ospd-openvas-1.0 https://github.com/greenbone/ospd-openvas.git
    git clone -b gvmd-9.0 https://github.com/greenbone/gvmd.git
    git clone -b gsa-9.0 https://github.com/greenbone/gsa.git

    export PKG_CONFIG_PATH=/opt/gvm/lib/pkgconfig:/tmp/gvm-source/gvm-libs/build:$PKG_CONFIG_PATH

    echo "[+] building gvm libs .."
    cd gvm-libs
    mkdir build && cd build
    $(which cmake) .. -DCMAKE_INSTALL_PREFIX=/opt/gvm
    $(which make) && $(which make install)
    ldconfig

    echo "[+] buillding openvas .."
    cd ../../openvas-smb/
    mkdir build && cd build
    cmake .. -DCMAKE_INSTALL_PREFIX=/opt/gvm
    $(which make) && $(which make install)

    echo "[+] building openvas-scaner .."
    cd ../../openvas
    mkdir build && cd build
    cmake .. -DCMAKE_INSTALL_PREFIX=/opt/gvm
    $(which make) && $(which make install)

    if grep "pcap_lookupdev is deprecated" /tmp/build_gvm/logs/err_log ; then
        echo "[+] found pcap_lookupdev deprecated"
        echo 
        sed -i 's/set (CMAKE_C_FLAGS_DEBUG "${CMAKE_C_FLAGS_DEBUG} ${COVERAGE_FLAGS}")/set (CMAKE_C_F
LAGS_DEBUG "${CMAKE_C_FLAGS_DEBUG} -Werror -Wno-error=deprecated-declarations")/' ../../openvas/CMakeLists.txt
        echo "[+] rebuilding openvas-scanner .."
        cmake .. -DCMAKE_INSTALL_PREFIX=/opt/gvm
        $(which make) && $(which make install)
    fi

    $(which ldconfig)

    cp /tmp/gvm-source/openvas/config/redis-openvas.conf /etc/redis/
    chown redis /etc/redis/redis-openvas.conf
    echo "db_address = /run/redis-openvas/redis.sock" > /opt/gvm/etc/openvas/openvas.conf
    chown gvm:gvm /opt/gvm/etc/openvas/openvas.conf
    usermod -aG redis gvm
    echo "net.core.somaxconn = 1024" >> /etc/sysctl.conf
    echo 'vm.overcommit_memory = 1' >> /etc/sysctl.conf
    $(which sysctl) -p /etc/sysctl.conf
    cat >/etc/systemd/system/disable_thp.service <<EOF
[Unit]
Description=Disable Kernel Support for Transparent Huge Pages (THP)

[Service]
Type=simple
ExecStart=/bin/sh -c "echo 'never' > /sys/kernel/mm/transparent_hugepage/enabled && echo 'never' > /sys/kernel/mm/transparent_hugepage/defrag"

[Install]
WantedBy=multi-user.target
EOF

    $(which systemctl) daemon-reload
    $(which systemctl) enable --now disable_thp
    $(which systemctl) enable --now "redis-server@openvas"

    echo "gvm ALL = NOPASSWD: /opt/gvm/sbin/openvas" > /etc/sudoers.d/gvm
    local sudoers_sec_path=$(cat /etc/sudoers | grep "secure_path" | awk -F"=" '{print $2}' | sed -e 's/"//g')
    local svg_sbin_path=":/opt/gvm/sbin"
    local new_sudoers_svg="${sudoers_sec_path}${svg_sbin_path}"
    # we comment, manually, the secure_path Defaul in sudoers, dirty..
    if ! grep -q "gvm" /etc/sudoers ; then 
        sed -i 's/.*secure_path.*/#&/' /etc/sudoers
        sed -i "12i\Defaults\tsecure_path=\"$new_sudoers_svg\"" /etc/sudoers
    fi
    if  ! grep -q "gsad" /etc/sudoers.d/gvm; then 
        echo "gvm ALL = NOPASSWD: /opt/gvm/sbin/gsad" >> /etc/sudoers.d/gvm
    fi 

    return 0
}
#################
update_nvt() {
    echo "[+] updating NVT database .."
    # we shall use user gvm we created
    # we place in the in the background, we wait for the pid
    sudo -iu gvm $(which greenbone-nvt-sync) &
    updt_nvt_pid=$!
    echo "[+] updating Redis with VT files .."
    sudo -iu gvm $(which openvas) --update-vt-info &
    updt_openvas_pid=$!

    wait $updt_nvt_pid
    echo "[+] nvt db synced."
    wait $updt_openvas_pid
    echo "[+] openvas db updated."

    return 0
}
#################
install_greenbone_v_m() {
    echo "[+] Building and installing greenbone vuln manager .."
    # we redirect stderr and stdout to log files
    mdir -p /tmp/build_gvmd/logs
    exec 2> >(tee "/tmp/build_gvmd/logs/err_log") 
    exec > >(tee "/tmp/build_gvmd/logs/out_log")

    export PKG_CONFIG_PATH=/opt/gvm/lib/pkgconfig:/tmp/gvm-source/gvm-libs/build:$PKG_CONFIG_PATH

    cd /tmp/gvm-source/gvmd
    mkdir build && cd build
    cmake .. -DCMAKE_INSTALL_PREFIX=/opt/gvm
    make && make install 

    echo "[+] building and installing greenbone sec assistant .."
    cd ../../gsa
    mkdir build && cd build
    cmake .. -DCMAKE_INSTALL_PREFIX=/opt/gvm
    make && make install

    echo "[+] updating .."
    sudo -iu gvm $(which greenbone-scapdata-sync)
    sudop -ui gvm $(greenbone-certdata-sync)

    echo "[+] creating certs .."
    sudo -iu gvm $(which gvm-manage-certs) -a

    return 0
}
#################
install_ospd_ospd_openvas() {
    echo "[+] installing ospd and ospd-openvas .."
    export PKG_CONFIG_PATH=/opt/gvm/lib/pkgconfig:/tmp/gvm-source/gvm-libs/build:$PKG_CONFIG_PATH

    mkdir -p /opt/gvm/lib/python3.8/site-packages/
    export PYTHONPATH=/opt/gvm/lib/python3.8/site-packages
    cd /tmp/gvm-source/ospd
    $(which python3) setup.py install --prefix=/opt/gvm
    cd ../ospd-openvas
    $(which python3) setup.py install --prefix=/opt/gvm

    return 0
}
#################
start_openvas_gsa_gsm_services() {
    echo "[+] starting gvm services .."

    sudo -iu gvm $(which python3) /opt/gvm/bin/ospd-openvas \
--pid-file /opt/gvm/var/run/ospd-openvas.pid \
--log-file /opt/gvm/var/log/gvm/ospd-openvas.log \
--lock-file-dir /opt/gvm/var/run -u /opt/gvm/var/run/ospd.sock

    sudo -iu gvm $(which gvmd) --osp-vt-update=/opt/gvm/var/run/ospd.sock
    sudo -iu gvm $(which gsad)
    echo "[+] logs are under /opt/gvm/var/log/gvm .."
    sudo -iu gvm $(which gvmd) --create-scanner="Kifarunix-demo OpenVAS Scanner" --scanner-type="OpenVAS" --scanner-host=/opt/gvm/var/run/ospd.sock
    echo "[+] verifying scanners .."
    sudo -iu gvm $(which gvmd) --get-scanners &> /tmp/vfy-scanners.out 
    local scanner_uuid=$(cat /tmp/vfy-scanners.out | tail -n1 | awk '{print $1}')
    echo "[+] scanner UUID: $scanner_uuid"
    echo "[+] verifying this scanner .."
    sudo -iu gvm $(gvmd) --verify-scanner=$scanner_uuid

    return 0
}
#################
create_openvas_gvm_admin() {
    echo "[+] creating admin gvmadmin for openvas gvm .."
    read -p "[+] input passwd for gvmadmin: " gvmadmpass
    sudo -iu gvm $(which gvmd) --create-user gvmadmin --password="$gvmadmpass"
    # then you can start the web interface at https://127.0.0.1 
    # you can then accept the cert created before, and proceed to the UI

    return 0
}
#################
clean_up() {
    echo "[+] removing /tmp git cloned directories .."
    [ -d "/tmp/build_gvm" ]  && rm -rf /tmp/build_gvm
    [ -d "/tmp/gvm-source" ] && rm -rf /tmp/gvm-source

    return 0
}
#################
update_nvt_cronjobs() {
    ## still to do .. and add to the installation
    echo "[+] setting up cron jobs for nvt updates .."
    cat > /etc/cron.daily <<EOF
#!/usr/bin/env bash

/usr/bin/sudo -iu gvm $(which greenbone-nvt-sync)
EOF

    return 0
}
#################

install_gvm_utils
install_gvm_utils() {
    for util in ${gvm_utils_array[*]}; do
        if [[ "$util" == *gvm* ]] ; then
            clean_up
            start_redis_server
            setup_gvm
            install_yarn
            install_postgres
            setup_gvm_env
            install_gvm
            install_greenbone_v_m
            install_ospd_ospd_openvas
            start_openvas_gsa_gsm_services
            create_openvas_gvm_admin
            update_nvt
        else 
            echo 
            echo "[+] installing ${util} .."
            ${APT} -y install ${util}
        fi

    done

    echo '############### GVM utils installed ###############'
    echo

    return 0
}