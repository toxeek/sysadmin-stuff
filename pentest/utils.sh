################
install_pent_utils() {
    echo '############### adding pentest utils ###############'
    while read PEN_UTIL; do 
        if echo $PEN_UTIL | grep -q "#"; then
            continue
        fi
        util="$(echo $PEN_UTIL | $AWK -F"=" '{print $1}')"
        val="$(echo $PEN_UTIL | $AWK -F"=" '{print $2}')"
        if [[ "$util" == "enable_pentest_utils" ]]; then
            if [ "$val" -ne "1" ]; then
                echo
                echo "[+] you decided not to enable pentest utils being installed. Exiting."
                echo
                return 1
            fi
        continue
        fi
        if [[ "$val" -eq "1" ]]; then
            sleep 1 && echo "[~] adding $util to pentest utils array .." && pentest_utils_array+=($util)
        fi
    done < $pentest_cfg_file

    return 0
}
################
install_sqlmap() {
    echo
    echo "[+] installing sqlmap .."
    echo
    ${APT} install -y sqlmap 

    return 0
}
################
install_ppmap() {
    echo
    if [ ! -f "/etc/apt/sources.list.d/google.list" ]; then
    echo "[+] installing ppmap .."
    sh -c 'echo "deb http://dl.google.com/linux/chrome/deb/ stable main" >> /etc/apt/sources.list.d/google.list'
    wget -q -O - https://dl-ssl.google.com/linux/linux_signing_key.pub | sudo apt-key add -
    ${APT} update
    ${APT} install google-chrome-stable

    go get -u github.com/chromedp/chromedp
    wget https://github.com/kleiton0x00/ppmap/releases/download/v1.2.0/ppmap
    mv ppmap /usr/local/bin 
    chmod +x /usr/local/bin/ppmap
    fi

    return 0
}
################
install_nuclei() {
    echo
    echo "[+] installing nuclei vulnerability scanner .."
    if [[ ! $(which nuclei) ]]; then 
        echo "[+] WARN: IT WILL TAKE SOME TIME TO BUILD .."
        echo
        go install -v github.com/projectdiscovery/nuclei/v2/cmd/nuclei@latest
        nuclei -version
    else
        echo "[+] nuclei is already installed .."
    fi

    return 0
}
################
install_metasploit() {
    echo
    echo "[+] installing metasploit .."
    echo
    if [[ ! $(which msfconsole) ]]; then
        mkdir -p /opt/metasploit && cd /opt/metasploit
        git clone https://github.com/rapid7/metasploit-framework.git
        cd metasploit-framework/
        gem install bundler
        bundle install # should b done as LOCAL_USER
        if [ "$?" -eq "0" ]; then
            ln -s $(pwd)/msfconsole /usr/bin/msfconsole 2>/dev/null
        else
            echo "[+] metasploit did not install correctly."
            return 1     
        fi
    else
        echo "[+] metasploit is already installed .."
    fi

    return 0
}
################
install_nmap() {
    echo "[+] installing nmap .."
    echo
    ${APT} install -y nmap 

    return 0
}
################
install_wpscan() {
    echo "[+] installing wpscan .."
    echo
    apt install ruby-full
    gem install wpscan
    wpscan --version 

    return 0
}
################
install_sipvicious() {
    echo "[+] installing sipvicious .."
    $(which pip3) install sipvicious

    return 0
}
################
install_hydra() {
    echo
    echo "[+] installing hydra .."
    ${APT} install -y hydra

    return 0
}
#################

install_pent_utils
install_pentest_utils() {
    echo '############### installing pentest utils ###############'
    for util in ${pentest_utils_array[*]}; do
        if [[ "$util" == *sqlmap* ]] ; then
            install_sqlmap
        elif [[ "$util" == *ppmap* ]] ; then
            install_ppmap
        elif [[ "$util" == *nuclei* ]] ; then
            install_nuclei
        elif [[ "$util" == *metasploit* ]] ; then
            install_metasploit
        elif [[ "$util" == *nmap* ]] ; then
            install_nmap
        elif [[ "$util" == *wpscan* ]] ; then
            install_wpscan
        elif [[ "$util" == *sipvicious* ]] ; then
            install_sipvicious
        elif [[ "$util" == *hydra* ]] ; then
            install_hydra
        else 
            echo 
            echo "[+] installing ${util} .."
            ${APT} -y install ${util} 2>>./error.log
        fi

    done
    echo

    return 0
}

